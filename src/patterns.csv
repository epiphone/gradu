pattern,addressed problem,description,advantages,disadvantages,sources,notes
Legacy API Proxy/Staged Migration (split into two?),"Legacy API uses outdated, obscure or difficult to use protocol/format/authentication",Create a new API layer with a serverless function to make the legacy API easier to use,"Makes legacy APIs easier to consume for modern clients that may not support older protocols and data formats; staged migration, you can reimplement old APIs one by one. Can be used to add a caching layer too (e.g. The Read Heavy Reporting Engine @ Daly)","Complexity, dependencies, management overhead","sbarski2017serverless, zambrano18patterns, https://docs.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer, https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler",
API Composition,An operation consist of multiple API calls,A function handles the glue code of calling various endpoints and combining the results,Simpler API for the client; transactions and retries are often better handled in the back-end; client is saved from the filtering and aggregation logic; function can also perform caching,"strong coupling, high latency for client","baldini17currentTrends, daly18blogPatterns (Aggregator)",
API Async,Slowly executing synchronous API requires a long-lived HTTP connection,"Use a function to wrap synchronous API, turning it asynchronous: function returns an operation id that can be used to poll result. Alternatively push API result into a queue or trigger as event ",TODO,can require idempotency,???,
API Aggregation,An operation consist of a complex multi-step API call ,"Hide complex call sequence (i.e. request token, validate token, fetch resource) inside a function","Client only needs to perform one request, saving resource; cleaner client API",TODO,baldini17currentTrends,
Flow Control/Batched Invocation/Throttle,Downstream service falls under heavy load because of high volume traffic from an upstream service ,High-volume service calls lambda that queues/stores requests. Another lambda periodically (or when some request count limit is reached) sends a batch of requests to downstream service,reduced load to downstream service; evens out spikes into constant throughput; robustness from requests being stored in an intermediary queue/db and fewer timeouts; lower response latency for the upstream service; possibility for filtering,"complexity, management","baldini17currentTrends, daly18blogPatterns (Scalable Webhooks/Frugal Consumer), rotem12soa (Decoupled Invocation), https://docs.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling",
Fat Client,"Transactional handling of various web services can lead to high latency and reduced UX; As erverless platforms no longer have a gatekeeper server process, the traditional model where back-end resources implicitly trust servers is not viable","Create thicker, more powerful clients that leverage distributed request-level authorization to connect to services directly; let clients operate workflows",Having less to do in Lambda is cheaper; fewer hops between online resources and lower latency leads to better UX; cheaper due to lack of server layer,"Not everything can be done in the client, secrets; consistency is easier server-side, retries, transactions etc","sbarski2017serverless, adzic2017serverless, ",split into distributed authorization?
Externalized State,Functions need to be stateless; any state saved in a function is not guaranteed to be available in subsequent function calls.,"developers externalize all function state to a key/value store, database or object storage",state is persisted reliably between invocations,"latency overhead, extra programming effort, dependencies on infra","leitner18industrialpractice,",
Routing Function/Component,API gateways and routes are cumbersome to configure,"A central routing function is used to receive requests and forward them via function chaining to another function, based on request payload",API routes only need to be configured for the commander function; decouple caller and receiver,routing information is hidden in internal implementation rather than configuration; extra latency,"leitner18industrialpractice, OOP pattern, hohpe2004enterprise (Message Router)",
Function Chain,Functions are restricted to a maximum call duration,"When execution exceeds timeout limit, function is split into multiple part to effectively allow continuous execution ",Timeouts are avoided,Creates more deployment units; splitting a task can be hard; introduces strong coupling between chained functions,"leitner18industrialpractice,",
Function Pinging/Warming,"Cold start leads to high latency, especially problematic for occasionally called functions",Periodically ping the function to keep it warm,Cold start is avoided,Extra cost; dependency in scheduling system; extra code path management in warmed functions,"leitner18industrialpractice, bardsley18optimizationStrategies",
Oversized Function,FaaS platforms provide no mechanism to select what type of CPU function is executed on,Select max memory allocation to also pump up CPU resources,Functions get access to faster CPUs; faster execution might reduce duration-related pricing; reduces cold start latency,"Extra cost, lower memory utilization","leitner18industrialpractice,",
Fan-out/Fan-In,Large time-intensive tasks exceed function resource limits,"A function distributes task among parallel worker functions. Workers can optionally ""fan in"" to a persistence layer where result is further aggregated","Overcomes function resource limits, enabling larger tasks; dramatic parallelism",Splitting tasks can be troublesome,"daly18blogPatterns, zambrano18patterns, mcgrath16cloudEventParadigms, hong18securingviaserverlesspatterns (Data Transform)",
Fan-out Event,An event needs to trigger multiple effects,"Subscribe multiple lambdas to a single SNS topic, each with different functionality e.g. email dispatch, data storage","Avoid a single big workflow in a function, reduce coupling",TODO,sbarski2017serverless,
Pipes and Filters,Complex multi-step sequential data processing required,"Break processing pipeline into a set of discrete single-responsibility functions, acting as glue between stream processor and other components","Avoids a single monolithic stream processor, scalability and manageability; reusable and composable stream processors",serialization/deserialization overhead,"sbarski2017serverless, hohpe2004enterprise, hong18securingviaserverlesspatterns (Data Streaming), https://docs.microsoft.com/en-us/azure/architecture/patterns/pipes-and-filters",
Periodic Invocation,"A task needs to be processed periodically
","Scheduler triggers a lambda periodically. Results can be stored in db, messaged onwards or just forgot ",Achives periodical task execution; enables background processing of tasks when there's no triggering event per ce available; can be used for batching,,hong18securingviaserverlesspatterns,
Event Processing,Some processing needs to occur on-demand when an event triggers,Connect a function to an event such as file upload or database change,"on-demand computing is cheaper, no need for polling; Reduce latency between event occurrence and task execution compared to scheduling; processing scales automatically by the number of events",strong coupling between event and function; function might have to be idempotent if at-least-once semantics apply,"baldini17currentTrends, hong18securingviaserverlesspatterns (Event-driven)",
State Machine,"Complex, stateful procedure requiring coordination",Use AWS Step Functions or similar to orchestrate stateful coordinated function sequences,Offers a more high-level abstraction; encourages small single-responsibility functions; no need to store state to external storage thanks to Step Functions; individual functions can be scaled instead of whole task,"Step Functions only support async (Daly wraps them in another function for a synchronous API), extra cost","hong18securingviaserverlesspatterns, daly18blogPatterns",
Circuit Breaker,"A non-responding or otherwise failing downstream service causes a cascading error and unnecessary requests, leading to extra costs and potentially preventing system restore. Serverless especially bears a risk of DDoSing yourself, when e.g. 1000 parallel lambdas connect to a database (mention aurora)","When error treshold is reached, set component state as closed and reject all requests. After a while, half open the circuit and if sample requests return OK, circuit is open again",Allow a call to an unresponse component to be aborted without needlessly consuming resources trying to repeatedly connect and retry,Requires state management; only valid for synchronous reqs;  ,"daly18blogPatterns, rotem12soa (Watchdog), bardsley18optimizationStrategies, https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker",
Bulkhead/Isolated Components,Lambda takes variable amount of time depending on the request; asymmetrical performance profile leads to requests being unnecessarily diverted to cold starts,Separate different functionality into separate Lambdas to prevent high-latency operation adversely effecting a low-latency one; relation to CQRS,"smaller, more isolated components easier to replace; high load on A doesn't effect B, i.e. performance isolation; serverless does away with economic incentives for bundling anyway",Operations overhead; partition is not trivial; FaaS platforms cannot guarantee functions are deployed on separate VMs,"bardsley18optimizationStrategies, https://docs.microsoft.com/en-us/azure/architecture/patterns/bulkhead, adzic2017serverless (remove incentives for bundling)",
Valet Key,Different services billed by different utilization metrics; passing data e.g. from client to storage through an application layer leads to extra costs,"Use a token that provides clients with restricted direct access to a specific resource, in order to offload data transfer from the application; use a Lambda just to authorize scoped access, once per session, and then let clients connect directly to the resource",Optimize costs by letting clients directly access resources,Token scope and expiration has to be well managed to prevent leaks; some loss of control; lack of validation/sanitization layer,"adzic2017serverless, https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key",
,,,,,,
"others: Least Privilege IAM role, ...",,,,,,
Isolate FaaS handler from function code,"Logic that is coupled to the FaaS handler code cannot be reuse elsewhere, e.g. running locally","Wrap function code under a more general API, use FaaS handler as a kind of an adapter. Separate the Lambda handler (entry point) from your core logic","Running locally, testing",,https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html#function-code,
Singleton,Resources are re-initialized in each invocation leading to latency,"Take advantage of Execution Context reuse to improve the performance of your function. Make sure any externalized configuration or dependencies that your code retrieves are stored and referenced locally after initial execution. Limit the re-initialization of variables/objects on every invocation. Instead use static initialization/constructor, global/static variables and singletons. Keep alive and reuse connections (HTTP, database, etc.) that were established during a previous invocation.",Improves function performance,,"https://sourcemaking.com/design_patterns/singleton, https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html#function-code",
